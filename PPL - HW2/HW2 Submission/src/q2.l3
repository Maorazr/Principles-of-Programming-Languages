

(define make-ok
  (lambda (val)
    (cons "ok" val)
  )
 )
 
(define make-error
  (lambda (msg)
    (cons "error" msg)
  )
 )

(define ok?
  (lambda (res)
    (if (pair? res)
      (eq? (car res) "ok")
      #f)))

(define error?
  (lambda (res)
    (if (pair? res)
      (eq? (car res) "error")
      #f)))


(define result?
  (lambda(res)
    (if (error? res)
        #t
        (if (ok? res)
            #t
            #f))))

(define result->val
  (lambda (res)
    (cdr res)
  )
)

(define bind 
  (lambda (f)
    (lambda (res)
      (if (eq? (car res) "error")
        res
        (f(cdr res))))))

(define make-dict
  (lambda ()
    (list)
  )
)

(define dict-iter
  (lambda (e)
    (if (eq? e '())
        #t
        (if (pair? (car e))
            (and #t (dict-iter (cdr e)))
            #f))))

(define dict?
  (lambda (e)
    (if (pair? e)
        (dict-iter e)
        (if (eq? '() e)
        #t
        #f))))

(define caar
  (lambda (lis)
      (car (car lis))))

(define cdar
  (lambda (lis)
      (cdr (car lis))))
 


(define get-help
  (lambda (dict k)
    (if (eq? dict '())
        (make-error "Key not found")
        (if (eq? (caar dict) k)
            (make-ok(cdr (car dict)))
            (get-help (cdr dict) k)
            )
        )
    )
  )

(define get
  (lambda (dict k)
    (if (dict? dict)
        (get-help dict k)
        (make-error "Error: not a dictionary"))))


(define put
  (lambda (dict k v)
    (if (dict? dict)
        (make-ok (put-help dict k v))
        (make-error "Error: not a dictionary"))))

(define put-help
  (lambda (dict k v)
    (if (eq? dict '())
        (cons (cons k v) dict)
        (if (eq? (caar dict) k)
            (put-help (cdr dict) k v)
            (cons (car dict) (put-help (cdr dict) k v))))))


(define map-dict
  (lambda (dict f)
    (if (dict? dict)
        (make-ok (map-help dict f))
        (make-error "Error: not a dictionary"))))

(define map-help
  (lambda (dict f)
    (if (empty? dict)
        dict
        (cons (cons (car (car dict)) (f ( cdr (car dict)))) (map-help (cdr dict) f)))))


(define filter-dict
  (lambda (dict pred)
    (if (dict? dict)
      (make-ok (filter-help dict pred))
      (make-error "Error: not a dictionary"))))

(define filter-help
  (lambda (dict pred)
    (if (empty? dict)
        dict
        (if (pred (caar dict) (cdar dict))
            (cons (cons (caar dict) (cdar dict)) (filter-help (cdr dict) pred))
            (filter-help (cdr dict) pred)))))
    
